from Standard.Base import all

import Standard.Base.Data.Text.Regex
import Standard.Base.Data.Text.Regex.Mode
import Standard.Base.Data.Ordering.Vector_Lexicographic_Order
polyglot java import org.enso.base.Regex_Utils

## Compares two text values according to the natural dictionary ordering.

   > Example
     Compare two texts according to the natural dictionary ordering.

         Natural_Order.compare "a2" "a100" == Ordering.Less

   > Example
     Sort a vector of texts according to the natural dictionary ordering.

         ["a2", "a1", "a100", "a001", "a0001"].sort by=Natural_Order.compare . should_equal ["a0001", "a001", "a1", "a2", "a100"]
compare : Text -> Text -> Ordering
compare text1 text2 =
    nat1 = here.to_natural_key text1
    nat2 = here.to_natural_key text2
    ## TODO [RW] for some reason removing this `res` and returning the result
       directly will make Vector.sort behave badly. This needs to be investigated
       and filed as a bug, then this comment can be updated with a reference to a
       relevant ticket.
    res = Vector_Lexicographic_Order.compare nat1 nat2
    res

## PRIVATE
to_natural_key : Text -> Vector
to_natural_key text = if text.is_empty then [] else
    splitter_regex = "([^0-9]+|[0-9]+)"
    # TODO [RW] should change to the other implementation once Regex is fixed
    # parts = splitter_regex.find text mode=Mode.All
    parts = Vector.from_array <| Regex_Utils.find_all_matches splitter_regex text

    is_integer_regex = Regex.compile "[0-9]+"
    parts.map part-> case is_integer_regex.matches part of
        True ->
            value = Decimal.parse part . floor
            Natural_Ordering_Numeric_Part value part
        False ->
            Natural_Ordering_Alphabetical_Part part

## PRIVATE
type Natural_Ordering_Part
    ## PRIVATE
    type Natural_Ordering_Alphabetical_Part (text : Text)

    ## PRIVATE
    type Natural_Ordering_Numeric_Part (value : Integer) (original_text : Text)

    ## PRIVATE
    compare_to : Natural_Ordering_Part -> Ordering
    compare_to that = case Pair this that of
        Pair (Natural_Ordering_Alphabetical_Part text1) (Natural_Ordering_Alphabetical_Part text2) ->
            text1 . compare_to text2
        Pair (Natural_Ordering_Numeric_Part value1 original1) (Natural_Ordering_Numeric_Part value2 original2) ->
            value_ordering = value1.compare_to value2
            case value_ordering of
                Ordering.Equal -> original1 . compare_to original2
                _ -> value_ordering
        _ -> Panic.throw "Implementation error: The implementation should ensure that different key parts are never compared. Please repor this as a bug in the Natural_Order module."

    to_text : Text
    to_text = case this of
        Natural_Ordering_Alphabetical_Part text -> text.to_text
        Natural_Ordering_Numeric_Part v o -> [v, o].to_text
