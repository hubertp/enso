from Standard.Base import all

import Standard.Base.Data.Text.Regex
import Standard.Base.Data.Text.Regex.Mode

## Compares two text values according to the natural dictionary ordering.

   > Example
     Compare two texts according to the natural dictionary ordering.

         Natural_Order.compare "a2" "a100" == Ordering.Less

   > Example
     Sort a vector of texts according to the natural dictionary ordering.

         ["a2", "a1", "a100", "a001", "a0001"].sort by=Natural_Order.compare . should_equal ["a0001", "a001", "a1", "a2", "a100"]
compare : Text -> Text -> Ordering
compare text1 text2 =
    nat1 = here.to_natural_key text1
    nat2 = here.to_natural_key text2
    Vector_Lexicographic_Order.compare nat1 nat2

## PRIVATE
to_natural_key : Text -> Vector
to_natural_key text =
    is_number_regex = Regex.compile "\d+"
    parts = is_number_regex.split text mode=Mode.All
    parts.map part-> case is_number_regex.matches part of
        True ->
            Natural_Ordering_Numeric_Part ... ...
        False ->
            Natural_Ordering_Alphabetical_Part part

## PRIVATE
type Natural_Ordering_Part
    ## PRIVATE
    type Natural_Ordering_Alphabetical_Part (text : Text)

    ## PRIVATE
    type Natural_Ordering_Numeric_Part (value : Integer) (leading_zeros : Integer)

