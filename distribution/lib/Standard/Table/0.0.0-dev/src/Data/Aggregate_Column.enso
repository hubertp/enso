from Standard.Base import all

import Standard.Table.Data.Column
from Standard.Table.Data.Group_By import Group_By_Key

## Defines an Aggregate Column
type Aggregate_Column
    ## Creates a new column with the row count of each group
    type Count (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of unique items in the selected
       column(s) within each group.
    # type Count_Distinct (columns:Column|Text|Integer|[Column|Text|Integer]) (name:Text|Nothing=Nothing)
    type Count_Distinct (columns:Column|Text|Integer|Vector) (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of not null (Nothing) values of the
       specified column within each group.
    type Count_Not_Null (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of null (Nothing) values of the
       specified column within each group.
    type Count_Null (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of not null (Nothing) and non-empty
       ("") values of the column within each group.
    type Count_Not_Empty (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of null (Nothing) or empty ("") text
       values of the column within each group.
    type Count_Empty (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the sum of values (ignoring NULLs) of the
       specified column within each group.
    type Sum (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the mean of values (ignoring NULLs) of the
       specified column within each group.
    type Average (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the median of values (ignoring NULLs) of the
       specified column within each group.
    type Median (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the standard deviation of values (ignoring
       NULLs) of the column within each group.

       Arguments:
       - population argument specifies if group is a sample or the population
    type Standard_Deviation (column:Column|Text|Integer) (name:Text|Nothing=Nothing) (population:Boolean=False)

    ## Creates a new column with the values concatenated together. NULL values will become an empty string.

       Arguments:
       - separator: added between each value.
       - prefix: added at the start of the result.
       - suffix: added at the end of the result.
    type Concatenate (column:Column|Text|Integer) (name:Text|Nothing=Nothing) (separator:Text="") (prefix:Text="") (suffix:Text="")

    ## Creates a new column with the first value in each group.
    type First (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the last value in each group.
    type Last (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Gets a column name to use for the aggregate column
    column_name : Table->Text
    column_name table =
        if this.name.is_nothing.not then this.name else
            col_name = c->(this.resolve_column table c).name
            case this of
                Count _ -> "Count"
                Count_Distinct columns _ -> "Count Distinct " + (columns.map col_name . join " ")
                Count_Not_Null c _ -> "Count NotNull " + col_name c
                Count_Null c _ -> "Count Null " + col_name c
                Count_Not_Empty c _ -> "Count NotEmpty " + col_name c
                Count_Empty c _ -> "Count Empty " + col_name c
                Sum c _ -> "Sum " + col_name c
                Average c _ -> "Average " + col_name c
                Median c _ -> "Median " + col_name c
                Standard_Deviation c _ _ -> "Standard Deviation " + col_name c
                Concatenate c _ _ _ _ -> "Concatenate " + col_name c
                First c _ -> "First " + col_name c
                Last c _ -> "Last " + col_name c

    ## PRIVATE
       Given a column reference resolve to the underlying column
    resolve_column : Table->(Column|Text|Integer)->Column
    resolve_column table column = case column of
        Column -> table.at (column.name)
        Text -> table.at column
        Integer -> table.columns.at column

    initial_value : Any
    initial_value = case this of
        Count_Distinct _ _ -> Map.empty
        Median _ _ -> Map.empty
        Average _ _ -> [0, 0]
        Standard_Deviation _ _ _ -> [0, 0, 0]
        Concatenate _ _ _ _ _ -> Nothing
        First _ _ -> Nothing
        Last _ _ -> Nothing
        _ -> 0

    make_aggregator : Table->(Any->Integer->Any)
    make_aggregator table = case this of
        Count _ -> count->_->(count+1)
        Count_Not_Null c _ ->
            col = this.resolve_column table c
            count->i->(count + if (col.at i).is_nothing then 0 else 1)
        Count_Null c _ ->
            col = this.resolve_column table c
            count->i->(count + if (col.at i).is_nothing then 1 else 0)
        Count_Not_Empty c _ ->
            col = this.resolve_column table c
            count->i->(count + if (col.at i).is_nothing then 0 else 1)
        Count_Empty c _ ->
            col = this.resolve_column table c
            count->i->(count + if (col.at i).is_nothing then 1 else 0)
        Sum c _ ->
            col = this.resolve_column table c
            total->i->
                v = col.at i
                (total + if v.is_nothing then 0 else v)
        Average c _ ->
            col = this.resolve_column table c
            a->i->
                v = col.at i
                (c + if v.is_nothing then a else [(a.at 0) + 1, (a.at 1) + v])
        Standard_Deviation c _ _ ->
            col = this.resolve_column table c
            a->i->
                v = col.at i
                (c + if v.is_nothing then a else [(a.at 0) + 1, (a.at 1) + v, (a.at 2) + v*v])
        Concatenate c _ j _ _ ->
            col = this.resolve_column table c
            text->i->
                val=if (col.at i).is_nothing then "" else (col.at i).to_text
                if i==0 then val else (text + j + val)
        First c _ ->
            col = this.resolve_column table c
            current->i->(if i==0 then (col.at i) else current)
        Last c _ ->
            col = this.resolve_column table c
            _->i->(col.at i)
        Count_Distinct columns _ ->
            resolved = columns.map c->(this.resolve_column table c)
            key_maker i = Group_By_Key (resolved.map c->(c.at i))
            map->i->(map.insert (key_maker i) 1)
        Median c _ ->
            col = this.resolve_column table c
            map->i->
                val = col.at i
                if val.is_nothing then map else
                    map.insert val (1 + (map.get_or_else val 0))

    evaluate : Any->Any
    evaluate value = case this of
        Count_Distinct _ _ -> value.size
        Median _ _ -> (Error.throw "Not in prototype")
        Average _ _ -> if (value.at 0) == 0 then Nothing else (value.at 1 / value.at 0)
        Standard_Deviation _ _ p -> if (value.at 0) == 0 then Nothing else
            (value.at 2/value.at 0 - (value.at 1/value.at 0)^2).sqrt
        Concatenate _ _ _ s p -> if value.is_nothing then value else (s + value + p)
        _ -> value
