from Standard.Base import all

## Defines an Aggregate Column
type Aggregate_Column
    ## Creates a new column with the row count of each group
    type Count (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of unique items of specified column
       within each group.
    type Count_Distinct (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of not null (Nothing) values of
       specified column within each group.
    type Count_Not_Null (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of null (Nothing) values of
       specified column within each group.
    type Count_Null (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of not null (Nothing) and non-empty
       ("") values of specified column within each group.
    type Count_Not_Empty (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of null (Nothing) or empty ("") text
       values of specified column within each group.
    type Count_Empty (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the sum of values (ignoring NULLs) of
       specified column within each group.
    type Sum (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the mean of values (ignoring NULLs) of
       specified column within each group.
    type Average (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the median of values (ignoring NULLs) of
       specified column within each group.
    type Median (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the standard deviation of values (ignoring
       NULLs) of specified column within each group.

       Arguments:
       - population argument specifies if group is a sample or the population
    type Standard_Deviation (column:Column|Text|Integer) (name:Text|Nothing=Nothing) (population:Boolean=False)

    ## Creates a new column with the values concatenated together. NULL values will become "".

       Arguments:
       - separator: added between each value.
       - prefix: added at the start of the result.
       - suffix: added at the end of the result.
    type Concatenate (column:Column|Text|Integer) (name:Text|Nothing=Nothing) (separator:Text="") (prefix:Text="") (suffix:Text="")

    ## Creates a new column with the first value in each group.
    type First (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the final value in each group.
    type Last (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Gets a column name to use for the aggregate column
    column_name : Table->Text
    column_name table =
        if this.name.is_nothing.not then this.name else
            case this of
                Count _ -> "Count"
                Count_Distinct c _ -> "Count Distinct " + (resolve_column table c).name
                Count_Not_Null c _ -> "Count NotNull " + (resolve_column table c).name
                Count_Null c _ -> "Count Null " + (resolve_column table c).name
                Count_Not_Empty c _ -> "Count NotEmpty " + (resolve_column table c).name
                Count_Empty c _ -> "Count Empty " + (resolve_column table c).name
                Sum c _ -> "Sum " + (resolve_column table c).name
                Average c _ -> "Average " + (resolve_column table c).name
                Median c _ -> "Median " + (resolve_column table c).name
                Standard_Deviation c _ _ -> "Standard Deviation " + (resolve_column table c).name
                Concatenate c _ _ _ _ -> "Concatenate " + (resolve_column table c).name
                First c _ -> "First " + (resolve_column table c).name
                Last c _ -> "Last " + (resolve_column table c).name

    ## PRIVATE
       Given a column reference resolve to the underlying column
    resolve_column : Table->(Column|Text|Integer)->Column
    resolve_column table column =
        case column of
            Column c -> c
            Text c -> table.at c
            Integer c -> table.columns.at c

    initial_value : Any
    initial_value =
        case this of
            Count_Distinct _ _ -> Map.empty
            Median _ _ -> Map.empty
            Average _ _ -> [0, 0]
            Standard_Deviation _ _ _ -> [0, 0, 0]
            Concatenate _ _ _ s _ -> s
            _ -> 0

    make_aggregator : Table->(Any->Integer->Any)
    make_aggregator table =
            case this of
                Count _ -> c->_->(c+1)
                Count_Not_Null c _ ->
                    col = resolve_column table c
                    c->i->(c + if (col.at i).is_nothing then 0 else 1)
                Count_Null c _ ->
                    col = resolve_column table c
                    c->i->(c + if (col.at i).is_nothing then 1 else 0)
                Count_Not_Empty c _ ->
                    col = resolve_column table c
                    c->i->(c + if (col.at i).is_nothing then 0 else 1)
                Count_Empty c _ ->
                    col = resolve_column table c
                    c->i->(c + if (col.at i).is_nothing then 1 else 0)
                Sum c _ ->
                    col = resolve_column table c
                    c->i->(c + if (col.at i).is_nothing then 0 else (col.at i))
                Average c _ ->
                    col = resolve_column table c
                    a->i->(c + if (col.at i).is_nothing then a else [(col.at i)])
                Count_Distinct c _ ->
                    col = resolve_column table c
                    c->i->

                _ -> _->->(Error.throw "Not in prototype")

