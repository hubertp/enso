from Standard.Base import all
from Standard.Table.Data.Group_By import Group_By_Key

## Defines an Aggregate Column
type Aggregate_Column
    ## Creates a new column with the row count of each group
    type Count (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of unique items in the selected
       column(s) within each group.
    type Count_Distinct (columns:Column|Text|Integer|[Column|Text|Integer]) (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of not null (Nothing) values of the
       specified column within each group.
    type Count_Not_Null (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of null (Nothing) values of the
       specified column within each group.
    type Count_Null (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of not null (Nothing) and non-empty
       ("") values of the column within each group.
    type Count_Not_Empty (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the count of null (Nothing) or empty ("") text
       values of the column within each group.
    type Count_Empty (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the sum of values (ignoring NULLs) of the
       specified column within each group.
    type Sum (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the mean of values (ignoring NULLs) of the
       specified column within each group.
    type Average (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the median of values (ignoring NULLs) of the
       specified column within each group.
    type Median (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the standard deviation of values (ignoring
       NULLs) of the column within each group.

       Arguments:
       - population argument specifies if group is a sample or the population
    type Standard_Deviation (column:Column|Text|Integer) (name:Text|Nothing=Nothing) (population:Boolean=False)

    ## Creates a new column with the values concatenated together. NULL values will become an empty string.

       Arguments:
       - separator: added between each value.
       - prefix: added at the start of the result.
       - suffix: added at the end of the result.
    type Concatenate (column:Column|Text|Integer) (name:Text|Nothing=Nothing) (separator:Text="") (prefix:Text="") (suffix:Text="")

    ## Creates a new column with the first value in each group.
    type First (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Creates a new column with the last value in each group.
    type Last (column:Column|Text|Integer) (name:Text|Nothing=Nothing)

    ## Gets a column name to use for the aggregate column
    column_name : Table->Text
    column_name table =
        if this.name.is_nothing.not then this.name else
            case this of
                Count _ -> "Count"
                Count_Distinct columns _ -> "Count Distinct " + ((columns.map c->(resolve_column table c).name).join " ")
                Count_Not_Null c _ -> "Count NotNull " + (resolve_column table c).name
                Count_Null c _ -> "Count Null " + (resolve_column table c).name
                Count_Not_Empty c _ -> "Count NotEmpty " + (resolve_column table c).name
                Count_Empty c _ -> "Count Empty " + (resolve_column table c).name
                Sum c _ -> "Sum " + (resolve_column table c).name
                Average c _ -> "Average " + (resolve_column table c).name
                Median c _ -> "Median " + (resolve_column table c).name
                Standard_Deviation c _ _ -> "Standard Deviation " + (resolve_column table c).name
                Concatenate c _ _ _ _ -> "Concatenate " + (resolve_column table c).name
                First c _ -> "First " + (resolve_column table c).name
                Last c _ -> "Last " + (resolve_column table c).name

    ## PRIVATE
       Given a column reference resolve to the underlying column
    resolve_column : Table->(Column|Text|Integer)->Column
    resolve_column table column =
        case column of
            Column c -> table.at (c.name)
            Text c -> table.at c
            Integer c -> table.columns.at c

    initial_value : Any
    initial_value =
        case this of
            Count_Distinct _ _ -> Map.empty
            Median _ _ -> Map.empty
            Average _ _ -> [0, 0]
            Standard_Deviation _ _ _ -> [0, 0, 0]
            Concatenate _ _ _ _ _ -> Nothing
            First _ _ -> Nothing
            Last _ _ -> Nothing
            _ -> 0

    make_aggregator : Table->(Any->Integer->Any)
    make_aggregator table =
            case this of
                Count _ -> count->_->(count+1)
                Count_Not_Null c _ ->
                    col = resolve_column table c
                    count->i->(count + if (col.at i).is_nothing then 0 else 1)
                Count_Null c _ ->
                    col = resolve_column table c
                    count->i->(count + if (col.at i).is_nothing then 1 else 0)
                Count_Not_Empty c _ ->
                    col = resolve_column table c
                    count->i->(count + if (col.at i).is_nothing then 0 else 1)
                Count_Empty c _ ->
                    col = resolve_column table c
                    count->i->(count + if (col.at i).is_nothing then 1 else 0)
                Sum c _ ->
                    col = resolve_column table c
                    total->i->
                        v = col.at i
                        (total + if v.is_nothing then 0 else v)
                Average c _ ->
                    col = resolve_column table c
                    a->i->
                        v = col.at i
                        (c + if v.is_nothing then a else [(a.at 0) + 1, (a.at 1) + v])
                Standard_Deviation c _ _ ->
                    col = resolve_column table c
                    a->i->
                        v = col.at i
                        (c + if v.is_nothing then a else [(a.at 0) + 1, (a.at 1) + v, (a.at 2) + v*v])
                Concatenate c _ j _ _ ->
                    col = resolve_column table c
                    text->i->
                        val=if (col.at i).is_nothing then "" else (col.at i).to_text
                        if i==0 then val else (text + j + val)
                First c _ ->
                    col = resolve_column table c
                    current->i->(if i==0 then (col.at i) else current)
                Last c _ ->
                    col = resolve_column table c
                    _->i->(col.at i)
                Count_Distinct columns ->
                    resolved = columns.map c->(resolve_column table c)
                    key_maker i = Group_By_Key (resolved.map c->(c.at i))
                    map->i->(map.insert (key_maker i) 1)
                Median c ->
                    col = resolve_column table c
                    map->i->
                        val = col.at i
                        if val.is_nothing then map else
                            map.insert val (1 + (map.get_or_else val 0))

    evaluate : Any->Any
    evaluate value = case this of
        Count_Distinct _ _ -> value.size
        Median _ _ -> (Error.throw "Not in prototype")
        Average _ _ -> if (value.at 0) == 0 then Nothing else (value.at 1 / value.at 0)
        Standard_Deviation _ _ p -> [0, 0, 0]
        Concatenate _ _ _ s p -> if value.is_nothing then value else (s + value + p)
        _ -> value
